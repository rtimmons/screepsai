# Ryan's Screeps Notes

Best viewed using [FoldingText](http://www.foldingtext.com/).

## Activity Log

- 2016-11-17: Setup first spawn `FirstSpawn`

## Links

- [My Room](https://screeps.com/a/#!/room/E67N36)
- Creep body-part calculator http://codepen.io/findoff/full/RPmqOd/


## Tasks

**tasks**.todo
- Convert existing roles to `DecoBuilder` OO model @done(2016-11-20)

- Research
	- Combat
	- How `Storage` works

- Record stats
	- Average time to go from mode->mode per role,level. Do different behavior if ttl is less than time to complete current goal
	- Time spent with no energy sources available.

- Manual intervention
	- Realtime inspection utils
	- Debug logging by creep name or id

- Automate construction
	- Automatically create roads from source to spawn and RommController
	- Keep track of frequently-trodden unpaved roads

- Prioritize actions
	- If harvesting and won't be energy for > N ticks, advance state
	- If no active energy, move to closest energy source
	- Prioritize refilling towers unless need harvesters or upgraders then spawns
	- Prioritize things based on [`Room.energyAvailable`](http://support.screeps.com/hc/en-us/articles/203079011-Room#energyAvailable) and [`energyCapacityAvailable`](http://support.screeps.com/hc/en-us/articles/203079011-Room#energyCapacityAvailable).
	- Prioritize delivering energy to spawns over construction
	- Prioritize extensions over other construction sites
	- Try to finish extensions fully before dedicating energy to unfinished ones
	- Build an upgrader/harvester if all energy sources in room are depleted (and able to) to clear out sources
	- If controller needs upgrading (timer below 80%) any creep with `CARRY`,`WORK` does upgrade
	- If ttl before harvesting is low, regen at spawn
	- Something to switch roles?
	- If no construction sites, don't spawn more builders
	- Spawn infantry/combat if enemies
	- Better prioritize what to spawn
	- One low-level harvester & upgrader if no other creeps

- Prevent resource starvation
	- ability to lock a harvester to a source to keep it properly utilizing it?
	- If no energy left in room, dump somewhere?
	- Don't hog the energy source for more than N harvest/* cycles

- Code Quality
	- Some sort of automated testing?

- When first setting up room, cache the 'best' sources

Investigations.todo
- path finding (store in memory?)
- FSM for given role & state => action
- Look at [cpu profiling](https://github.com/gdborton/screeps-profiler)
- Look at [gdborton's screeps code](https://github.com/gdborton/screeps).

Ideas.todo
- Roles just different priorities of actions?

## Declarative Levels

TODO: this isn't really fleshed out...

```javascript
{
	levels: [
		{
			capcityMin: 0,
			capacityMax: 150,
			roles: {
				harvester: {
					prefix: 'h1',
					parts: {W:1, M:1, C:1},
				},
				builder: {
					prefix: 'b1',
					parts: {W:1, M:1, C:1},
				}
				upgrader: {
					prefix: 'u1',
					parts: {W:1, M:1, C:1},
				}
			}
		},
		{
			capcityMin: 151,
			capacityMax: 300,
			roles: {
				harvester: {
					prefix: 'h1',
					parts: {W:1, M:1, C:1},
				},
				builder: {
					prefix: 'b1',
					parts: {W:1, M:1, C:1},
				}
				upgrader: {
					prefix: 'u1',
					parts: {W:1, M:1, C:1},
				}
			}
		}
	]
}

```


## Console Commands

```javascript
Game.spawns['Spawn1'].createCreep( [WORK,WORK,WORK,WORK,CARRY,MOVE,MOVE],
    'HarvesterBig',
    { role: 'harvester' } );

Game.spawns['Spawn1'].createCreep( [WORK,CARRY,MOVE],
    undefined,
    { role: 'harvester' } );
```


```javascript
Game.spawns['Spawn1'].createCreep(
[
        WORK,
        MOVE,
        CARRY,
      ], 
        undefined,
        {role: 'upgrader'}
      );
```


```
var sites = Game.spawns['Spawn1'].room.find(FIND_CONSTRUCTION_SITES); for (k in sites) { sites[k].remove(); }
```

```javascript
// https://screeps.com/a/#!/sim/tutorial/3
Game.spawns['Spawn1'].createCreep( [WORK, CARRY, MOVE], 'Builder1',
    { role: 'builder' } );

Game.spawns['Spawn1'].createCreep( [WORK, CARRY, MOVE], undefined,
    { role: 'harvester' } );

Game.spawns['Spawn1'].createCreep( [WORK, CARRY, MOVE], 'Upgrader1' );

Game.creeps['Harvester1'].memory.role = 'harvester';
Game.creeps['Upgrader1'].memory.role = 'upgrader';

// turn everybody into harvesters in times of creep shortage
for (var i in Game.creeps) { Game.creeps[i].memory.role = 'harvester'; }


var n = 0;
for (var i in Game.creeps) { 
    if ( Game.creeps[i].memory.role == 'builder' ) { continue; }
	Game.creeps[i].memory.role = 'builder'; 
	if (n++ >= 5) { break; }
}

var n = 0;
for (var i in Game.creeps) { 
    if ( Game.creeps[i].memory.role == 'harvester' ) { continue; }
	Game.creeps[i].memory.role = 'harvester'; 
	if (n++ >= 2) { break; }
}


var n = 0;
for (var i in Game.creeps) { 
    if ( Game.creeps[i].memory.role == 'harvester' ) { continue; }
	Game.creeps[i].memory.role = 'builder'; 
	if (n++ >= 5) { break; }
}
var n = 0;
for (var i in Game.creeps) { 
    if ( Game.creeps[i].memory.role == 'harvester' || Game.creeps[i].memory.role != 'upgrader' ) { continue; }
	Game.creeps[i].memory.role = 'harvester'; 
	if (n++ >= 2) { break; }
}


var n = 0;
for(var i in Game.creeps) {
  if ( Game.creeps[i].memory.role == 'builder' ) {
      Game.creeps[i].suicide();
      if ( ++n >= 5 ) { break; }
  }
}

for (var k in Game.constructionSites) {
  var s = Game.constructionSites[k];
  s.remove();
}

for (var i in Game.creeps) { 
    if ( Game.creeps[i].)
    Game.creeps[i].memory.role = 'upgrader';
}

```


```javascript
// ATTACK

    Game.spawns['Spawn1'].createCreep(
      [MOVE,CARRY,WORK],
      undefined,
      {role: 'harvester', level:1}
    );

    Game.spawns['Spawn1'].createCreep(
      [MOVE,CARRY,CARRY,CARRY,WORK,WORK],
      undefined,
      {role: 'harvester', level:1}
    );


    Game.spawns['Spawn1'].createCreep(
      [MOVE,MOVE,ATTACK,ATTACK,ATTACK,ATTACK,TOUGH,TOUGH],
      'Attack1',
      {role: 'infantry', level:2}
    );

```

Hmmm...


```
2000     12293.9,    6.147     Room.work
10914    6025.0,     0.552     Creep.work
2000     3534.5,     1.767     Spawn.work
70000    1949.3,     0.028     Structure.work
2832     1733.8,     0.612     Creep.moveTo
3727     1093.7,     0.293     Creep.moveToAndHarvest
1659     886.0,      0.534     Creep.takeEnergyFrom
8466     871.9,      0.103     Room.createConstructionSite
3500     852.7,      0.244     Creep.harvest
975      745.8,      0.765     Creep.deliverEnergyTo
2615     741.1,      0.283     Room.needsCouriers
278      700.5,      2.520     RoomPosition.findPathTo
278      673.6,      2.423     Room.findPath
21342    575.4,      0.027     Spawn.availableEnergy
2805     535.1,      0.191     Room.getStorage
2108     511.7,      0.243     Creep.move
1830     487.1,      0.266     Creep.moveByPath
1439     483.9,      0.336     Creep.moveToAndUpgrade
26596    454.5,      0.017     Room.find
4247     443.1,      0.104     Room.droppedControllerEnergy

62       137.7,      2.221      Spawn.work
103      25.8,       0.251      Room.needsCouriers
41       23.9,       0.583      Room.needsUpgraders
41       18.6,       0.452      Room.needsHarvesters
41       17.6,       0.429      Room.getSourcesNeedingHarvesters
105      16.1,       0.154      Room.getStorage
548      14.9,       0.027      Spawn.availableEnergy
341      12.1,       0.035      Room.find
62       8.4,        0.135      Room.harvesterCount
48       8.3,        0.174      Spawn.extend
211      7.9,        0.037      Room.getExtensions
41       7.3,        0.178      Room.droppedControllerEnergy
103      7.1,        0.069      Room.courierCount
62       7.1,        0.115      Room.getHarvesters
41       6.5,        0.158      Room.needsBuilders
12       6.1,        0.509      Spawn.buildBuilder
62       5.8,        0.094      Room.setupFlags
103      5.6,        0.055      Room.getCouriers
15       5.0,        0.330      Room.upgraderWorkParts
41       4.8,        0.116      Room.builderCount
```