# Ryan's Screeps Notes

Best viewed using [FoldingText](http://www.foldingtext.com/).

## Activity Log

- 2016-11-17: Setup first spawn `FirstSpawn`

## Links

- [My Room](https://screeps.com/a/#!/room/E67N36)
- Creep body-part calculator http://codepen.io/findoff/full/RPmqOd/

## Tasks

**tasks**.todo
- Convert existing roles to `DecoBuilder` OO model @done(2016-11-20)

- Research
	- Combat
	- How `Storage` works

- Record stats
	- Average time to go from mode->mode per role,level. Do different behavior if ttl is less than time to complete current goal
	- Time spent with no energy sources available.

- Manual intervention
	- Give creep names indicating role, body, and instance#
	- Realtime inspection utils
	- Debug logging by creep name or id
	- Realtime re-direction (changing roles/modes, etc.)

- Automate construction
	- Automatically create roads from source to spawn and RommController
	- Keep track of frequently-trodden unpaved roads

- Prioritize actions
	- If harvesting and won't be energy for > N ticks, advance state
	- If no active energy, move to closest energy source
	- Prioritize refilling towers unless need harvesters or upgraders then spawns
	- Prioritize things based on [`Room.energyAvailable`](http://support.screeps.com/hc/en-us/articles/203079011-Room#energyAvailable) and [`energyCapacityAvailable`](http://support.screeps.com/hc/en-us/articles/203079011-Room#energyCapacityAvailable).
	- Prioritize delivering energy to spawns over construction
	- Prioritize extensions over other construction sites
	- Try to finish extensions fully before dedicating energy to unfinished ones
	- Build an upgrader/harvester if all energy sources in room are depleted (and able to) to clear out sources
	- Change `bodyType` based on room energy
	- If controller needs upgrading (timer below 80%) any creep with `CARRY`,`WORK` does upgrade
	- If ttl before harvesting is low, regen at spawn
	- Something to switch roles?
	- If no construction sites, don't spawn more builders
	- Better prioritize what to spawn
	- One low-level harvester & upgrader if no other creeps

- Prevent resource starvation
	- ability to lock a harvester to a source to keep it properly utilizing it?
	- If no energy left in room, dump somewhere?
	- Don't hog the energy source for more than N harvest/* cycles

- Code Quality
	- Some sort of automated testing?
	- Extend `creep.prototype` etc instead of `Deco`

- When first setting up room, cache the 'best' sources

Investigations.todo
- path finding (store in memory?)
- FSM for given role & state => action

Ideas.todo
- Roles just different priorities of actions?

## Declarative Levels

TODO: this isn't really fleshed out...

```javascript
{
	levels: [
		{
			capcityMin: 0,
			capacityMax: 150,
			roles: {
				harvester: {
					prefix: 'h1',
					parts: {W:1, M:1, C:1},
				},
				builder: {
					prefix: 'b1',
					parts: {W:1, M:1, C:1},
				}
				upgrader: {
					prefix: 'u1',
					parts: {W:1, M:1, C:1},
				}
			}
		},
		{
			capcityMin: 151,
			capacityMax: 300,
			roles: {
				harvester: {
					prefix: 'h1',
					parts: {W:1, M:1, C:1},
				},
				builder: {
					prefix: 'b1',
					parts: {W:1, M:1, C:1},
				}
				upgrader: {
					prefix: 'u1',
					parts: {W:1, M:1, C:1},
				}
			}
		}
	]
}

```


## Console Commands

```javascript
Game.spawns['Spawn1'].createCreep( [WORK,WORK,WORK,WORK,CARRY,MOVE,MOVE],
    'HarvesterBig',
    { role: 'harvester' } );
```


```javascript
Game.spawns['Spawn1'].createCreep(
[
        WORK,
        MOVE,
        CARRY,
      ], 
        undefined,
        {role: 'upgrader'}
      );
```


```
var sites = Game.spawns['Spawn1'].room.find(FIND_CONSTRUCTION_SITES); for (k in sites) { sites[k].remove(); }
```

```javascript
// https://screeps.com/a/#!/sim/tutorial/3
Game.spawns['Spawn1'].createCreep( [WORK, CARRY, MOVE], 'Builder1',
    { role: 'builder' } );

Game.spawns['Spawn1'].createCreep( [WORK, CARRY, MOVE], undefined,
    { role: 'harvester' } );

Game.spawns['Spawn1'].createCreep( [WORK, CARRY, MOVE], 'Upgrader1' );

Game.creeps['Harvester1'].memory.role = 'harvester';
Game.creeps['Upgrader1'].memory.role = 'upgrader';

// turn everybody into harvesters in times of creep shortage
for (var i in Game.creeps) { Game.creeps[i].memory.role = 'harvester'; }


var n = 0;
for (var i in Game.creeps) { 
    if ( Game.creeps[i].memory.role == 'builder' ) { continue; }
	Game.creeps[i].memory.role = 'builder'; 
	if (n++ >= 5) { break; }
}

var n = 0;
for (var i in Game.creeps) { 
    if ( Game.creeps[i].memory.role == 'harvester' ) { continue; }
	Game.creeps[i].memory.role = 'harvester'; 
	if (n++ >= 2) { break; }
}


var n = 0;
for (var i in Game.creeps) { 
    if ( Game.creeps[i].memory.role == 'harvester' ) { continue; }
	Game.creeps[i].memory.role = 'builder'; 
	if (n++ >= 5) { break; }
}
var n = 0;
for (var i in Game.creeps) { 
    if ( Game.creeps[i].memory.role == 'harvester' || Game.creeps[i].memory.role != 'upgrader' ) { continue; }
	Game.creeps[i].memory.role = 'harvester'; 
	if (n++ >= 2) { break; }
}


var n = 0;
for(var i in Game.creeps) {
  if ( Game.creeps[i].memory.role == 'builder' ) {
      Game.creeps[i].suicide();
      if ( ++n >= 5 ) { break; }
  }
}

for (var k in Game.constructionSites) {
  var s = Game.constructionSites[k];
  s.remove();
}

for (var i in Game.creeps) { 
    if ( Game.creeps[i].)
    Game.creeps[i].memory.role = 'upgrader';
}

```